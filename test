todo for the demo:
1- remove forget password link and anything related to the eServices
2- make sure the translations are correct and only related to the poc only not eServices
3- check menu levels *
4- searching in menu should work on main and sub menus
5- Language switching *
6- view add edit screens *
7- add sorting 
8- add filter icon on the search buttons 
9- handle session (cookie) expiration
10- check the security req. for eServices and implement them
11- check the load testing env. (who can work and what can we use)
12- manage session from Cache not singlton
13- VERY IMPPORTANT => give estimation for page development (get/post) and its behaviours (design/implementation/validations/business logic like enable/disable/etc.) - break down the sub tasks and give them estimate time for each sub task to help give estimation on the who project development => prepare estimation sheet for the tasks (check the techniques on the internet (best, worst, average)  and who is the resource who is the not on the project (mid-level developer)
understand the page business => start the development => (prepare a plan break down the job for the page development from a to z) include all activities to complete the page including (how the page is working, and what are the required behavours, and what the sd needs to work correctly with each behavour and to initiate any required data by the sd, the actual development and validations on both sides and the unit testing (prepare test cases) 
14-  how the angular is loaded and working on  the client (local, server, lazy loading)
15- prepare a solid ground for the development to be followed by developers (quality)
16- prepare unit testing code
 
1- site setup 14 april
2- demo 16 of april
3- review security issues and prepare it for security testing 21 april
4- Mohan and regeni will join on the next Monday => understand the pages behaviour of the VA and plan to implement them in Angular



- frontend library to generate the angular pages basedon xml pubpages (keep the captions, methods, strcutre, attributes, params, clicks, ordering, etc.)
- try to reuse all current avialable resoruces like transalations, methods => to focus on other tasks
- check how can we execute the javascript code directly in the angular*
- prepare the initial work to be ready for the automation process (likethe translations and the captions, etc)
- show that you are ready and thinking of the automation part

what has been auto generated 
what can be auto generated

to note that there are other parts that need work but can be done on the upgrade process as it was not need during the poc but has been covered and studied (we have other parts that not covered in the poc but will be covered in the development

** logout implemenation  ** 
** take the dictionary from Gopi from the prod for the menu and the labels **

---------------------------------------------------------------
TODO in the code (enhancements):
1- add the page id using the serliazer to be read in the service doc service auto
2- move the pagination and the sorting to be in a shared service and send to the service doc service (CreatePageServiceDocument) to be added auto and all other data that prepared manually
3- merge the pagination and the sort in one method (two param) and check them to do the required action and generate the required output
4- split the dtos of the pagination and the sorting in the quiries in 2 objects
5- to check with mc team in case of submit any form, should we get the domain data to do backend validation or they handle this from their side
6- update the parser to return camel case for the angular only
7- make the create data node to use reflection to create the object node from the c# class and from the attributes
--------------------------------------------------------------------------


Ahmed Tasks:
1- study a way to generate Angular pages (html, ts,cs) from xml and javascript
2- staudy a way to execute JS in the Angualr directly
3- study a way to generate the front-end page behaviour and validations 
4- study a way to use the MC resoruces using the caption ids


Outputs:
1- doable
2- accurany %
3- needed modifications (automation %, manual work %)


********************************************************************************

How to work
1- understand the page business
2- implement the page design in html and angular => possibilty of partail automation 
3- implement the front-end page behaviour => manual work + automation
4- convert the XML to JSON c# object using the API (receive the xml and return the c# object) => can use service doc xml or PubPAge XML (preferred)
5- check if there are any data retrived in the html file not are in the sd to be added to the extra data (htmlNodes) to be fetched from the html on the post call => Manual process
6- agree on the DTO between the angular and the API => automated
7- implement the api and the command/query
8- add any server-side validations on the command and the query => automation
9- define the page id and the page action id that should be called => automated
10- impelement the handler using the predefined and shared services to prepare the service document
11- add any custom changes on the service document (like search section, sorting, pagination) => all can be moved to be shared as well but need to be called => can be automated.
12- test the api => if worked, then Ok, else:
13- compare the generated XML by the layer with the original XML from the MC APP and find the differences (ignore the nodes and attributes orders as they are not matters)=> Use API like Claude 
14- Apply the differences on the api handler
15- test the changes


Notes:
1- some handlers response can be complex object of the service document and other extra data if ther eare data retrieved in the html and are not the service document
2- some data in the post should not be filled from the front-end even that it is in the xml, and it should be filled from the api hub for security reasons like form date. => manual work to be considered

***************************************************************

Document strcuture:
1- Work Baseline Steps (how to work, quality of work, estimations, number of resrouces)
2- Define the work quality points
3- Estimations
4- What can be done auto and what should be done manually 
